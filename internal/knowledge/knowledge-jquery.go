package knowledge

// getJQueryBits returns jQuery knowledge tidbits
func getJQueryBits() []KnowledgeBit {
	return []KnowledgeBit{
		// Selectors
		{
			Title:       "Basic Selectors",
			Description: "$() wraps elements. $('#id') selects ONE. $('.class') and $('tag') select ALL matches.",
			HTMLCode:    "<div id=\"myId\">Hello</div>\n<p class=\"myClass\">First</p>\n<p class=\"myClass\">Second</p>\n<p>Third</p>",
			JQueryCode:  "$('#myId')    // ONE element: the div\n$('.myClass') // TWO elements: First and Second <p> tags\n$('p')        // THREE elements: all <p> tags\n\n// Chain operations\n$('#myId').addClass('highlight').fadeIn(500);",
			ModernCode:  "document.getElementById('myId');                    // ONE element\ndocument.querySelector('.myClass');                // ONE (first match only)\ndocument.querySelectorAll('.myClass');           // ALL matches (NodeList)\ndocument.querySelectorAll('p');                    // ALL <p> tags",
			Category:    "Selectors",
		},
		{
			Title:       "Attribute Selectors",
			Description: "Select ALL elements by attribute values. [attr], [attr=value], [attr^=value] (starts with), [attr$=value] (ends with).",
			HTMLCode:    "<a href=\"https://google.com\">Google</a>\n<a href=\"https://github.com\">GitHub</a>\n<a href=\"/about\">About</a>\n<a href=\"doc.pdf\">PDF</a>\n<input type=\"text\" />\n<input type=\"checkbox\" />",
			JQueryCode:  "$('[href]')            // FOUR elements: all <a> tags\n$('[type=\"text\"]')     // ONE element: the text input\n$('[href^=\"https\"]')   // TWO elements: Google + GitHub\n$('[href$=\".pdf\"]')    // ONE element: PDF link\n\n// Complex combinations\n$('input[type=\"text\"]:disabled') // disabled text inputs",
			ModernCode:  "document.querySelectorAll('[href]')          // ALL 4 <a> tags\ndocument.querySelectorAll('[type=\"text\"]')   // text input\ndocument.querySelectorAll('[href^=\"https\"]') // Google + GitHub\ndocument.querySelectorAll('[href$=\".pdf\"]')  // PDF link\n\n// Complex selections combined with CSS:\ndocument.querySelector('input[type=\"text\"]:disabled');",
			Category:    "Selectors",
		},
		{
			Title:       "Pseudo Selectors",
			Description: ":first selects ONE. :even/:odd/:not() select ALL matches. Index is 0-based!",
			HTMLCode:    "<ul>\n  <li>Item 1</li>  <!-- index 0 = even -->\n  <li>Item 2</li>  <!-- index 1 = odd -->\n  <li>Item 3</li>  <!-- index 2 = even -->\n  <li>Item 4</li>  <!-- index 3 = odd -->\n</ul>\n<div class=\"skip\">A</div>\n<div class=\"keep\">B</div>\n<div class=\"keep\">C</div>",
			JQueryCode:  "$('li:first')       // ONE element: Item 1\n$('li:last')        // ONE element: Item 4\n$('li:even')        // TWO elements: Item 1 and Item 3 (index 0,2)\n$('li:odd')         // TWO elements: Item 2 and Item 4 (index 1,3)\n$('div:not(.skip)') // TWO elements: B and C divs\n\n// Combined with other selectors\n$('.item:visible:not(.disabled)', 'li:odd');",
			ModernCode:  "document.querySelector('li')                // First only\ndocument.querySelectorAll('li:nth-child(odd)')      // CSS is 1-indexed! (1,3)\ndocument.querySelectorAll('div:not(.skip)')       // B and C\n\n// Better patterns with CSS :\nArray.from(document.querySelectorAll('li')) .forEach((li, i) => {\n    if (i % 2 === 1) console.log('odd index', li); // 0-indexed like jQuery\n});",
			Category:    "Selectors",
		},
		{
			Title:       "Hierarchy Selectors",
			Description: "Space = ALL descendants. > = direct children only. + = next sibling. ~ = all following siblings.",
			HTMLCode:    "<div id=\"box\">\n  <p>Direct child</p>\n  <span><p>Nested deep</p></span>\n</div>\n<h1>Title</h1>\n<p>Adjacent</p>\n<span>Not a p</span>\n<p>Sibling</p>",
			JQueryCode:  "$('div p')       // TWO elements: \"Direct child\" + \"Nested deep\"\n$('div > p')     // ONE element: only \"Direct child\" <p>\n$('h1 + p')      // ONE element: \"Adjacent\" <p> (immediately after h1)\n$('h1 ~ p')      // TWO elements: \"Adjacent\" + \"Sibling\" (all <p> after h1)",
			ModernCode:  "document.querySelectorAll('div p')   // both <p> tags\ndocument.querySelectorAll('div > p') // direct child only\ndocument.querySelector('h1 + p')     // next sibling\ndocument.querySelectorAll('h1 ~ p')  // all following siblings",
			Category:    "Selectors",
		},
		{
			Title:       "Form Selectors",
			Description: "jQuery form selectors. :checked/:disabled select ALL matches.",
			HTMLCode:    "<input type=\"text\" value=\"name\" />\n<input type=\"text\" value=\"email\" />\n<input type=\"password\" />\n<input type=\"checkbox\" checked id=\"cb1\" />\n<input type=\"checkbox\" id=\"cb2\" />\n<input type=\"text\" disabled />",
			JQueryCode:  "$(':text')             // THREE elements: name + email + disabled text\n$(':checkbox')         // TWO elements: cb1 + cb2\n$(':checkbox:checked') // ONE element: cb1 only\n$('input:disabled')    // ONE element: disabled text input",
			ModernCode:  "document.querySelectorAll('input[type=\"text\"]')  // all 3 text inputs\ndocument.querySelectorAll('input[type=\"checkbox\"]:checked') // cb1\ndocument.querySelectorAll('input:disabled')  // disabled input",
			Category:    "Selectors",
		},

		// DOM Manipulation
		{
			Title:       ".html() vs .text() vs .val()",
			Description: ".html()/.text() GETTER: returns FIRST element. SETTER: changes ALL matched elements.",
			HTMLCode:    "<div class=\"box\">First</div>\n<div class=\"box\">Second</div>\n<input id=\"input\" type=\"text\" />",
			JQueryCode:  "// jQuery SETTER (changes ALL matched elements):\n$('.box').html('<b>New</b>'); // BOTH divs now contain <b>New</b>\n$('.box').text('Plain');      // BOTH divs now contain \"Plain\" (no HTML)\n$('#input').val('hello');     // input now has value=\"hello\"\n\n// jQuery GETTER (returns FIRST element only):\nconst first = $('.box').html(); // returns \"First\" (not \"Second\")",
			ModernCode:  "div.innerHTML = '<b>Hi</b>';   // ONE element only\ndiv.textContent = '<b>Hi</b>'; // ONE element only\ninput.value = 'hello';\n// To change ALL: document.querySelectorAll('.box').forEach(...)",
			Category:    "DOM Manipulation",
		},
		{
			Title:       ".append() vs .prepend() vs .after() vs .before()",
			Description: "append/prepend add INSIDE element (at end/start). after/before add OUTSIDE element (as sibling).",
			HTMLCode:    "<div id=\"box\">\n  <p>Original content</p>\n</div>",
			JQueryCode:  "$('#box').append('<p>End</p>');      // INSIDE at end\n$('#box').prepend('<p>Start</p>');  // INSIDE at start\n$('#box').after('<p>After</p>');    // OUTSIDE after (sibling)\n$('#box').before('<p>Before</p>');  // OUTSIDE before (sibling)\n\n// Chain them:\n$('#box').prepend('<h1>Title</h1>').append('<p>Footer</p>');",
			ModernCode:  "box.insertAdjacentHTML('beforeend', '<p>End</p>');\nbox.insertAdjacentHTML('afterbegin', '<p>Start</p>');\nbox.insertAdjacentHTML('afterend', '<p>After</p>');\nbox.insertAdjacentHTML('beforebegin', '<p>Before</p>');",
			Category:    "DOM Manipulation",
		},
		{
			Title:       ".remove() vs .empty() vs .detach()",
			Description: ".remove() deletes element and data/events. .empty() removes child content only. .detach() removes but keeps data/events for later reattachment.",
			HTMLCode:    "<div id=\"div\">\n  <p>Child 1</p>\n  <p>Child 2</p>\n</div>",
			JQueryCode:  "$('#div').remove();  // deletes entire <div> and children\n$('#div').empty();   // keeps <div> but removes both <p> tags\nvar $el = $('#div').detach(); // removes from DOM but keeps in memory\n$('body').append($el); // reattach with events intact",
			ModernCode:  "div.remove();        // delete element\ndiv.innerHTML = '';  // delete children\nconst el = div.cloneNode(true); div.remove();\ndocument.body.append(el);",
			Category:    "DOM Manipulation",
		},
		{
			Title:       ".attr() vs .prop()",
			Description: ".attr() for HTML attributes (href, src, etc). .prop() for DOM properties (checked, disabled, selected). Use .prop() for boolean properties.",
			HTMLCode:    "<a id=\"link\" href=\"old.html\">Link</a>\n<img id=\"pic\" src=\"old.jpg\" />\n<input id=\"cb\" type=\"checkbox\" />",
			JQueryCode:  "$('#link').attr('href', 'new.html'); // changes href attribute\n$('#pic').attr('src', 'new.jpg');    // changes src attribute\n$('#cb').prop('checked', true);      // checks the checkbox\n$('#cb').prop('disabled', true);     // disables the checkbox",
			ModernCode:  "link.setAttribute('href', 'new.html');\npic.src = 'new.jpg';\ncb.checked = true;   // use property for boolean states\ncb.disabled = true;",
			Category:    "DOM Manipulation",
		},
		{
			Title:       ".addClass() / .removeClass() / .toggleClass()",
			Description: "Changes ALL matched elements. .hasClass() checks if ANY element has the class.",
			HTMLCode:    "<div class=\"box\">First</div>\n<div class=\"box\">Second</div>\n<div class=\"box active\">Third</div>",
			JQueryCode:  "// jQuery (affects ALL matched elements):\n$('.box').addClass('highlight');   // ALL 3 divs get 'highlight' class\n$('.box').removeClass('active');   // removes 'active' from Third only\n$('.box').toggleClass('new');      // ALL 3 divs toggle 'new' class\n\n// hasClass returns true if ANY element has the class:\nif ($('.box').hasClass('active')) { /* TRUE - Third has it */ }",
			ModernCode:  "// Modern JS (ONE element only):\ndiv.classList.add('highlight');\ndiv.classList.remove('original');\ndiv.classList.toggle('active');\n// For ALL: document.querySelectorAll('.box').forEach(el => \n//   el.classList.add('highlight')\n// )",
			Category:    "DOM Manipulation",
		},
		{
			Title:       ".css() - Get/Set Styles",
			Description: "GETTER: returns FIRST element's style. SETTER: changes ALL matched elements.",
			HTMLCode:    "<div class=\"box\" style=\"color: blue;\">First</div>\n<div class=\"box\" style=\"color: red;\">Second</div>",
			JQueryCode:  "GETTER (returns FIRST element only):\nvar color = $('.box').css('color');  // returns \"blue\" (First's color)\nSETTER (changes ALL matched elements):\n$('.box').css('color', 'green');  // BOTH divs now green\n$('.box').css({ 'color': 'purple', 'font-size': '20px' });\n// BOTH divs now purple, 20px",
			ModernCode:  "(ONE element only):\nconst color = getComputedStyle(div).color;\ndiv.style.color = 'red';\nObject.assign(div.style, { color: 'red', fontSize: '20px' });\n// For ALL: document.querySelectorAll('.box').forEach(...)",
			Category:    "DOM Manipulation",
		},
		{
			Title:       ".clone()",
			Description: "Create deep copy of elements. Pass true to also copy event handlers.",
			HTMLCode:    "<div id=\"original\">\n  <p>Original content</p>\n</div>",
			JQueryCode:  "var $copy = $('#original').clone();      // copies structure\nvar $copy = $('#original').clone(true);  // copies + events\n$('body').append($copy);",
			ModernCode:  "const copy = original.cloneNode(true);  // deep clone (children too)\ndocument.body.append(copy);\n// Note: cloneNode doesn't copy event listeners",
			Category:    "DOM Manipulation",
		},

		// Traversal
		{
			Title:       ".find() vs .children() vs .parent() vs .parents()",
			Description: ".find() searches all descendants (nested at any depth). .children() only direct children (one level down). .parent() immediate parent (one level up). .parents() all ancestors (any level up).",
			HTMLCode:    "<div id=\"box\">\n  <ul>\n    <li><p>Nested deep</p></li>\n  </ul>\n  <span>Direct child</span>\n</div>",
			JQueryCode:  "$('#box').find('p');     // finds <p> (nested deep inside)\n$('#box').children('p'); // finds nothing (<p> not direct child)\n$('#box').children();    // finds <ul> and <span> (direct children)\n$('p').parent();         // finds <li> (immediate parent of <p>)\n$('p').parents();        // finds <li>, <ul>, #box (all ancestors)",
			ModernCode:  "box.querySelectorAll('p');\n[...box.children].filter(el => el.tagName === 'P');\n[...box.children];\np.parentElement;",
			Category:    "Traversal",
		},
		{
			Title:       ".siblings() vs .next() vs .prev()",
			Description: "Navigate between siblings (elements with same parent, at same level). .siblings() gets all others at same level, .next()/.prev() get adjacent ones.",
			HTMLCode:    "<div>\n  <p>One</p>\n  <div id=\"item\">Two</div>\n  <span>Three</span>\n  <p>Four</p>\n</div>",
			JQueryCode:  "$('#item').siblings();  // <p>One</p>, <span>Three</span>, <p>Four</p>\n$('#item').next();      // <span>Three</span> (next element)\n$('#item').prev();      // <p>One</p> (previous element)",
			ModernCode:  "[...item.parentElement.children].filter(el => el !== item);\nitem.nextElementSibling;   // Three\nitem.previousElementSibling; // One",
			Category:    "Traversal",
		},
		{
			Title:       ".closest()",
			Description: "Traverses UP the tree to find first ancestor matching selector (includes self). Stops at first match.",
			HTMLCode:    "<div class=\"container\">\n  <div class=\"wrapper\">\n    <table>\n      <tr>\n        <td id=\"item\">Cell</td>\n      </tr>\n    </table>\n  </div>\n</div>",
			JQueryCode:  "$('#item').closest('tr');         // finds parent <tr>\n$('#item').closest('div');        // finds .wrapper (first div up)\n$('#item').closest('.container'); // finds .container\n$(this).closest('tr').remove();   // remove entire table row",
			ModernCode:  "item.closest('tr');\nitem.closest('div');\nitem.closest('.container');\nthis.closest('tr').remove();",
			Category:    "Traversal",
		},
		{
			Title:       ".filter() vs .not() vs .is()",
			Description: ".filter() reduces set to matching elements. .not() removes matching. .is() tests if any match (returns boolean).",
			HTMLCode:    "<div class=\"active\">A</div>\n<div class=\"skip\">B</div>\n<div class=\"active\">C</div>\n<div id=\"item\">Visible item</div>",
			JQueryCode:  "$('div').filter('.active');   // selects divs A and C\n$('div').not('.skip');        // selects divs A and C (excludes B)\nif ($('#item').is(':visible')) { /* true */ }",
			ModernCode:  "[...document.querySelectorAll('div')].filter(el => el.classList.contains('active'));\n[...document.querySelectorAll('div')].filter(el => !el.classList.contains('skip'));\nif (item.offsetParent !== null) { /* visible check */ }",
			Category:    "Traversal",
		},
		{
			Title:       "this vs $(this)",
			Description: "this = DOM element with native properties. $(this) = jQuery object with methods. Convert with $(this).",
			HTMLCode:    "<button id=\"btn\">Click me</button>",
			JQueryCode:  "$('#btn').on('click', function() {\n    console.log(this);           // <button id=\"btn\">Click me</button> (DOM element)\n    console.log(this.id);        // \"btn\" (native property)\n    console.log($(this));        // jQuery object: [<button id=\"btn\">Click me</button>]\n    console.log($(this).attr('id')); // \"btn\" (jQuery method)\n    \n    // Use native properties on this:\n    this.disabled = true;        // ✓ Works (DOM property)\n    \n    // Use jQuery methods on $(this):\n    $(this).addClass('clicked'); // ✓ Works (jQuery method)\n});",
			ModernCode:  "btn.addEventListener('click', function() {\n    console.log(this);        // <button> element\n    console.log(this.id);     // \"btn\" (native property)\n    \n    // Use native properties:\n    this.disabled = true;\n    this.classList.add('clicked');\n});",
			Category:    "Traversal",
		},
		{
			Title:       "Using this with Traversal Methods",
			Description: "Use this in event handlers to navigate relative to clicked element. Most common traversal pattern.",
			HTMLCode:    "<div class=\"card\">\n  <button class=\"delete\">Delete</button>\n  <span class=\"status\">Active</span>\n</div>\n<div class=\"field\">\n  <input class=\"required\" type=\"text\" />\n  <span class=\"error-message\" style=\"display:none;\">Required</span>\n</div>\n<table>\n  <tr><td>Cell 1</td><td>Cell 2</td></tr>\n</table>",
			JQueryCode:  "// Click delete button -> remove its parent card\n$('.delete').on('click', function() {\n    $(this).addClass('clicked');         // Style the clicked button\n    $(this).closest('.card').remove();   // Find parent .card, remove it\n    $(this).siblings('.status').text('Deleting...'); // Update same-level element\n});\n\n// In forms - validate current input\n$('.required').on('blur', function() {\n    const hasValue = $(this).val() !== '';\n    $(this).parent().toggleClass('error', !hasValue);\n    $(this).next('.error-message').toggle(!hasValue);\n});\n\n// In tables - highlight entire row\n$('td').hover(\n    function() { $(this).parent().addClass('highlight'); },\n    function() { $(this).parent().removeClass('highlight'); }\n);",
			ModernCode:  "// Same patterns\ndocument.querySelectorAll('.delete').forEach(btn => {\n    btn.addEventListener('click', function() {\n        this.closest('.card').remove();\n        this.classList.add('clicked');\n    });\n});",
			Category:    "Traversal",
		},
		{
			Title:       "GOTCHA: Arrow Functions and this",
			Description: "Arrow functions DON'T have their own 'this'. Use traditional functions or e.currentTarget in arrow functions.",
			HTMLCode:    "<button class=\"btn\">Click me</button>",
			JQueryCode:  "// WRONG: Arrow function - 'this' is not the button!\n$('.btn').on('click', (e) => {\n    console.log(this);           // window or undefined, NOT the button!\n    $(this).addClass('clicked'); // ERROR!\n});\n\n// CORRECT 1: Use traditional function (has its own 'this')\n$('.btn').on('click', function(e) {\n    console.log(this);           // ✓ The button element\n    $(this).addClass('clicked'); // ✓ Works!\n});\n\n// CORRECT 2: Use arrow function with e.currentTarget\n$('.btn').on('click', (e) => {\n    console.log(e.currentTarget); // ✓ The button element\n    $(e.currentTarget).addClass('clicked'); // ✓ Works!\n});\n\n// Same issue with .each()\n$('.btn').each((i, el) => {\n    console.log(this);           // WRONG: not the element\n    console.log(el);             // ✓ Use the parameter instead\n    $(el).text('Correct');      // ✓ Use parameter\n});",
			ModernCode:  "// Same issue with arrow functions in modern JS\nbtn.addEventListener('click', (e) => {\n    console.log(this);  // NOT the button (window or undefined)\n});\n\n// CORRECT 1: Traditional function\nbtn.addEventListener('click', function(e) {\n    console.log(this);  // ✓ The button\n});\n\n// CORRECT 2: Arrow + e.currentTarget\nbtn.addEventListener('click', (e) => {\n    console.log(e.currentTarget);  // ✓ The button\n});",
			Category:    "Traversal",
		},
		{
			Title:       ".each()",
			Description: "Iterate over jQuery collection. Use $(this) inside callback to refer to current element.",
			HTMLCode:    "<ul>\n  <li>Apple</li>\n  <li>Banana</li>\n  <li>Cherry</li>\n</ul>",
			JQueryCode:  "$('li').each(function(index, element) {\n    console.log(index, $(this).text());\n    // 0 Apple, 1 Banana, 2 Cherry\n});",
			ModernCode:  "document.querySelectorAll('li').forEach((el, index) => {\n    console.log(index, el.textContent);\n});",
			Category:    "Traversal",
		},

		// Events
		{
			Title:       ".on() - Modern Event Binding",
			Description: "Attach event handlers. Replaces old .click(), .hover(), etc. Supports event delegation.",
			HTMLCode:    "<button id=\"btn\">Click me</button>\n<ul id=\"list\">\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>",
			JQueryCode:  "$('#btn').on('click', function() { alert('Clicked!'); });\n// Event delegation - works for future <li> elements:\n$('#list').on('click', 'li', function() {\n    alert($(this).text());\n});",
			ModernCode:  "btn.addEventListener('click', () => { alert('Clicked!'); });\nlist.addEventListener('click', (e) => {\n    if (e.target.matches('li')) {\n        alert(e.target.textContent);\n    }\n});",
			Category:    "Events",
		},
		{
			Title:       ".off() - Remove Event Handlers",
			Description: "Remove event handlers added with .on(). Must pass same function reference to remove specific handler.",
			HTMLCode:    "<button id=\"btn\">Click me</button>",
			JQueryCode:  "function myHandler() { alert('Clicked!'); }\n\n$('#btn').on('click', myHandler);  // add handler\n$('#btn').off('click', myHandler); // remove THAT handler\n$('#btn').off('click');            // remove ALL click handlers\n\n// GOTCHA: Anonymous functions can't be removed!\n$('#btn').on('click', function() { /* ... */ });\n$('#btn').off('click', function() { /* ... */ }); // WON'T WORK! Different function",
			ModernCode:  "const handler = () => alert('Clicked!');\nbtn.addEventListener('click', handler);\nbtn.removeEventListener('click', handler); // must pass same reference",
			Category:    "Events",
		},
		{
			Title:       ".one() - One-Time Event",
			Description: "Attach event handler that runs once then auto-removes itself. Perfect for one-time actions like modals, tooltips.",
			HTMLCode:    "<button id=\"welcomeBtn\">Show Welcome</button>\n<div id=\"modal\" style=\"display:none;\">\n  <input type=\"text\" />\n</div>",
			JQueryCode:  "$('#welcomeBtn').one('click', function() {\n    alert('Welcome! This will only show once.');\n});\n\n// Perfect for one-time actions:\n$('#modal').one('shown', function() {\n    $(this).find('input').focus(); // Only focus on first open\n});",
			ModernCode:  "welcomeBtn.addEventListener('click', function handler() {\n    alert('Welcome!');\n    welcomeBtn.removeEventListener('click', handler);\n});\n// Or: btn.addEventListener('click', handler, { once: true });",
			Category:    "Events",
		},
		{
			Title:       "Event Object Properties",
			Description: "e.preventDefault() stops default action. e.stopPropagation() stops bubbling. e.target is element that triggered event.",
			HTMLCode:    "<div id=\"outer\">\n  <a id=\"link\" href=\"https://example.com\">Click me</a>\n</div>",
			JQueryCode:  "$('#link').on('click', function(e) {\n    e.preventDefault();     // DON'T follow the link\n    e.stopPropagation();    // DON'T bubble to #outer\n    console.log(e.target);  // <a> element (what you clicked)\n    console.log(e.currentTarget); // also <a> (what handler is on)\n    console.log(e.type);    // \"click\"\n    console.log(e.which);   // 1 (left mouse button)\n});\n\n$('#outer').on('click', function() {\n    // This WON'T run if link clicked (stopPropagation)\n});",
			ModernCode:  "link.addEventListener('click', function(e) {\n    e.preventDefault();     // Same as jQuery\n    e.stopPropagation();    // Same as jQuery\n    console.log(e.target);  // <a> element\n    console.log(e.currentTarget); // also <a>\n    console.log(e.type);    // \"click\"\n    console.log(e.button);  // 0 (left mouse button, not e.which)\n});",
			Category:    "Events",
		},
		{
			Title:       ".trigger() - Programmatically Fire Events",
			Description: "Manually trigger events on elements. Can pass custom data. Useful for testing or programmatic interactions.",
			HTMLCode:    "<button id=\"btn\">Button</button>\n<form id=\"form\"><input type=\"text\" /></form>\n<input id=\"field\" type=\"email\" />",
			JQueryCode:  "$('#btn').trigger('click');  // Fire click event\n$('#form').trigger('submit'); // Fire submit event\n\n// Pass custom data:\n$('#field').trigger('validate', { value: 'test@email.com' });\n\n// Listen for custom event:\n$('#field').on('validate', function(e, data) {\n    console.log('Validating:', data.value);\n});",
			ModernCode:  "btn.click();  // Only works for click\nbtn.dispatchEvent(new Event('click'));\n// Custom events:\nconst ev = new CustomEvent('validate', { \n    detail: { value: 'john@example.com', isValid: true } \n});\nfield.dispatchEvent(ev);",
			Category:    "Events",
		},
		{
			Title:       "Event Delegation",
			Description: "Attach handler to parent that responds to events on children (even future children). More efficient than binding to each child.",
			HTMLCode:    "<ul id=\"list\">\n  <li>Item 1</li>\n  <li>Item 2</li>\n  <!-- New items will be added dynamically -->\n</ul>",
			JQueryCode:  "ONE handler on parent works for ALL children (even future ones)\n$('#list').on('click', 'li', function() {\n    alert($(this).text()); // works for Item 1, 2, AND New!\n});",
			ModernCode:  "list.addEventListener('click', (e) => {\n    if (e.target.closest('li')) {\n        alert(e.target.textContent);\n    }\n});",
			Category:    "Events",
		},

		// Effects & Animation
		{
			Title:       ".show() / .hide() / .toggle()",
			Description: "Show or hide elements. Can pass duration for animation. GOTCHA: Changes display property.",
			HTMLCode:    "<div id=\"message\" style=\"display:none;\">Hello World!</div>\n<button id=\"toggle-btn\">Toggle</button>",
			JQueryCode:  "$('#message').show();         // sets display: block (instant)\n$('#message').hide();         // sets display: none (instant)\n$('#message').show(400);      // fades in over 400ms\n$('#message').toggle('slow'); // toggles with animation\n\n$('#toggle-btn').on('click', function() {\n    $('#message').toggle(300); // smooth toggle\n});\n\n// GOTCHA: Sets display to 'block', not original value!\n// If element was 'inline' or 'flex', it becomes 'block'",
			ModernCode:  "div.style.display = 'none';\ndiv.style.display = 'block';\n// For animation, use CSS transitions + class toggle",
			Category:    "Effects",
		},
		{
			Title:       ".fadeIn() / .fadeOut() / .fadeTo()",
			Description: "Fade elements in/out. .fadeTo() animates to specific opacity. Preserves space when fading out.",
			HTMLCode:    "<div id=\"alert\" style=\"display:none;\">Notification message</div>\n<img id=\"image\" src=\"photo.jpg\" />",
			JQueryCode:  "$('#alert').fadeIn(500);      // fades in over 500ms\n$('#alert').fadeOut('fast');  // fades out quickly (200ms)\n$('#image').fadeTo(1000, 0.5); // fade to 50% opacity, stays visible\n\n// Difference from hide():\n$('#alert').fadeOut();  // opacity 0, THEN display: none\n$('#alert').hide();     // display: none immediately\n\n// Use case: Notifications\nfunction showNotification(msg) {\n    $('#alert').text(msg).fadeIn(300).delay(2000).fadeOut(300);\n}",
			ModernCode:  "// CSS transition + classList\nalert.style.transition = 'opacity 500ms';\nalert.style.opacity = '1';  // fade in\nalert.style.opacity = '0';  // fade out\n\n// Or Web Animations API:\nalert.animate({ opacity: [0, 1] }, { duration: 500 });  // fade in\nalert.animate({ opacity: [1, 0] }, { duration: 500 });  // fade out",
			Category:    "Effects",
		},
		{
			Title:       ".slideDown() / .slideUp() / .slideToggle()",
			Description: "Animate height to show/hide elements with sliding effect. Common for accordions, dropdowns.",
			HTMLCode:    "<button id=\"accordion-btn\">Toggle Details</button>\n<div id=\"details\" style=\"display:none;\">\n  <p>Hidden content that slides down</p>\n</div>\n<div class=\"accordion-header\">Section 1</div>\n<div class=\"accordion-content\" style=\"display:none;\">Content 1</div>",
			JQueryCode:  "// Accordion pattern\n$('#accordion-btn').on('click', function() {\n    $('#details').slideToggle(300);\n});\n\n// Or explicit:\n$('#details').slideDown(500);  // animates height from 0 to full\n$('#details').slideUp(500);    // animates height from full to 0\n\n// Multiple accordions:\n$('.accordion-header').on('click', function() {\n    $(this).next('.accordion-content').slideToggle();\n});",
			ModernCode:  "CSS transitions on max-height\ndetails.style.transition = 'max-height 300ms ease';\ndetails.style.maxHeight = '500px';  // slide down\ndetails.style.maxHeight = '0';      // slide up\ndetails.style.overflow = 'hidden';  // hide overflow",
			Category:    "Effects",
		},
		{
			Title:       ".animate()",
			Description: "Custom animations on numeric CSS properties. Can't animate colors directly (need plugin). GOTCHA: Only works on numeric values.",
			HTMLCode:    "<div id=\"box\" style=\"width:100px; height:100px; background:red;\">Animate me</div>",
			JQueryCode:  "// Animate multiple properties\n$('#box').animate({\n    width: '200px',\n    height: '200px',\n    opacity: 0.5,\n    marginLeft: '100px'\n}, 1000, function() {\n    console.log('Animation complete!');\n});\n\n// GOTCHA: Can't animate colors!\n$('#box').animate({ backgroundColor: 'blue' }); // WON'T WORK!\n// Need jQuery UI or color plugin\n\n// GOTCHA: Only numeric properties work\n$('#box').animate({ display: 'none' }); // WON'T WORK!",
			ModernCode:  "// Web Animations API\nbox.animate({\n    width: ['100px', '200px'],\n    opacity: [1, 0.5]\n}, { duration: 1000, easing: 'ease-in-out' })\n.finished.then(() => console.log('Done'));",
			Category:    "Effects",
		},
		{
			Title:       "GOTCHA: Animation Queue Buildup",
			Description: "Rapid animations queue up. Use .stop() to clear queues and prevent overlap.",
			HTMLCode:    "<div id=\"box\">Hover me!</div>",
			JQueryCode:  "// WRONG: Animations stack up\n$('#box').hover(\n    function() { $(this).fadeIn(500); },\n    function() { $(this).fadeOut(500); }\n);\n// Rapid hover = animations run in sequence after you stop!\n\n// CORRECT: Clear queue first\n$('#box').hover(\n    function() { $(this).stop(true, true).fadeIn(500); },\n    function() { $(this).stop(true, true).fadeOut(500); }\n);",
			ModernCode:  "// Modern JS: Cancel previous animation\nlet currentAnim;\nbox.addEventListener('mouseenter', () => {\n    if (currentAnim) currentAnim.cancel();\n    currentAnim = box.animate({ opacity: [0, 1] }, 500);\n});\nbox.addEventListener('mouseleave', () => {\n    if (currentAnim) currentAnim.cancel();\n    currentAnim = box.animate({ opacity: [1, 0] }, 500);\n});",
			Category:    "Effects",
		},
		{
			Title:       ".stop() - Control Animation Queues",
			Description: "Manage animation queues. clearQueue removes pending, jumpToEnd forces current to final state.",
			HTMLCode:    "<div id=\"box\">Animated box</div>\n<button id=\"menu-btn\">Toggle Menu</button>\n<div id=\"menu\" style=\"display:none;\">Menu content</div>\n<div class=\"nav-item\">Hover me\n  <div class=\"dropdown\" style=\"display:none;\">Dropdown</div>\n</div>",
			JQueryCode:  ".stop() options:\n$('#box').stop();           // stop current animation only\n$('#box').stop(true);       // stop + clear queue\n$('#box').stop(true, true); // stop + clear + jump to end\n\n// Real use case: Menus\n$('#menu-btn').on('click', function() {\n    $('#menu').stop(true, true).slideToggle();\n});\n\n// Prevent flicker: Always clear before animating\n$('.nav-item').hover(\n    function() { $(this).find('.dropdown').stop(true, true).slideDown(); },\n    function() { $(this).find('.dropdown').stop(true, true).slideUp(); }\n);",
			ModernCode:  "Web Animations API\nconst anim = box.animate(keyframes, options);\nanim.cancel();  // stop and clear",
			Category:    "Effects",
		},
		{
			Title:       ".delay() - Pause Animation Chain",
			Description: "Add pause between chained animations. Only affects animation queue, NOT regular code.",
			HTMLCode:    "<div id=\"notification\" style=\"display:none;\">Success! Item saved.</div>\n<div id=\"box\">Box</div>",
			JQueryCode:  "// Show notification briefly\n$('#notification')\n    .fadeIn(300)\n    .delay(2000)      // pause 2 seconds\n    .fadeOut(300);\n\n// GOTCHA: .delay() only works with animations!\n$('#box').delay(1000).addClass('active'); // WON'T WORK!\n// addClass runs immediately, doesn't wait\n\n// For non-animations, use setTimeout\nsetTimeout(() => $('#box').addClass('active'), 1000);",
			ModernCode:  "Use setTimeout\nsetTimeout(() => { /* animate */ }, 1000);",
			Category:    "Effects",
		},

		// AJAX
		{
			Title:       "$.ajax() - Full Control",
			Description: "Full-featured AJAX request. Returns jqXHR object (Promise-like).",
			HTMLCode:    "<button id=\"load\">Load Users</button>\n<div id=\"users\"><!-- Users will be loaded here --></div>",
			JQueryCode:  "$.ajax({\n    url: '/api/users',\n    method: 'GET',\n    dataType: 'json',\n    success: function(data) {\n        $('#users').html(data.map(u => `<p>${u.name}</p>`).join(''));\n    },\n    error: function(xhr, status, error) {\n        console.error('Error:', error);\n    }\n});\n\n// POST with data:\n$.ajax({\n    url: '/api/users',\n    method: 'POST',\n    data: { name: 'John', email: 'john@example.com' },\n    success: function(response) { console.log('Created:', response); }\n});",
			ModernCode:  "load.addEventListener('click', () => {\n    fetch('/api/users')\n        .then(res => res.json())\n        .then(data => {\n            users.innerHTML = data.map(u => `<p>${u.name}</p>`).join('');\n        })\n        .catch(err => console.error(err));\n});",
			Category:    "AJAX",
		},
		{
			Title:       "$.get() / $.post() - Shortcuts",
			Description: "Simplified GET/POST requests. Shorter syntax than $.ajax(). Good for simple requests.",
			HTMLCode:    "<button id=\"get-users\">Get Users</button>\n<button id=\"create-user\">Create User</button>\n<div id=\"result\"><!-- Result here --></div>",
			JQueryCode:  "// GET request\n$.get('/api/users', function(data) {\n    console.log('Users:', data);\n});\n\n// POST request\n$.post('/api/users', \n    { name: 'John', email: 'john@example.com' },\n    function(response) {\n        console.log('Created:', response);\n    }\n);\n\n// With error handling:\n$.get('/api/users')\n    .done(data => console.log(data))\n    .fail(() => alert('Error loading users'));",
			ModernCode:  "fetch('/api/users').then(r => r.json()).then(console.log);\nfetch('/api/users', {\n    method: 'POST',\n    body: JSON.stringify({ name: 'John' }),\n    headers: { 'Content-Type': 'application/json' }\n}).then(r => r.json());",
			Category:    "AJAX",
		},
		{
			Title:       "$.getJSON() - Fetch JSON",
			Description: "Shortcut for GET request expecting JSON response. Auto-parses JSON (no need for JSON.parse).",
			HTMLCode:    "<select id=\"country-select\">\n  <option>Select a country...</option>\n</select>",
			JQueryCode:  "// Load JSON and populate dropdown\n$.getJSON('/api/countries', function(countries) {\n    countries.forEach(country => {\n        $('#country-select').append(\n            $('<option>').val(country.code).text(country.name)\n        );\n    });\n});\n\n// With error handling:\n$.getJSON('/api/settings')\n    .done(settings => applySettings(settings))\n    .fail(() => console.error('Failed to load settings'));",
			ModernCode:  "fetch('/api/countries')\n    .then(res => res.json())\n    .then(countries => {\n        countries.forEach(country => {\n            const opt = document.createElement('option');\n            opt.value = country.code;\n            opt.textContent = country.name;\n            select.appendChild(opt);\n        });\n    });",
			Category:    "AJAX",
		},
		{
			Title:       ".load() - Load HTML into Element",
			Description: "Fetch HTML and insert into element. Unique fragment loading extracts specific page parts without parsing.",
			HTMLCode:    "<div id=\"content\"></div>\n<div id=\"user-widget\"></div>\n<div id=\"recent-posts\"></div>",
			JQueryCode:  "// Load entire page\n$('#content').load('/blog.html');\n\n// Powerful: Load fragments from SAME page\n$('#user-widget').load('/dashboard.html #profile');\n$('#recent-posts').load('/dashboard.html #posts');\n// ONE request extracts multiple pieces!",
			ModernCode:  "// Full page load\nfetch('/blog.html').then(r => r.text()).then(html => content.innerHTML = html);\n\n// Fragment loading (manual parsing required)\nfetch('/dashboard.html').then(r => r.text()).then(html => {\n    const doc = new DOMParser().parseFromString(html, 'text/html');\n    userWidget.innerHTML = doc.querySelector('#profile')?.innerHTML || '';\n    recentPosts.innerHTML = doc.querySelector('#posts')?.innerHTML || '';\n});",
			Category:    "AJAX",
		},
		{
			Title:       "Promise-Style AJAX",
			Description: "$.ajax() returns Promise-like object. Use .done(), .fail(), .always(). Different from native Promises!",
			HTMLCode:    "<button id=\"submit\">Submit</button>\n<div id=\"loading\" style=\"display:none;\">Loading...</div>\n<div id=\"result\"><!-- Result here --></div>",
			JQueryCode:  "// Promise-like (jqXHR object)\n$('#submit').on('click', function() {\n    $('#loading').show();\n    \n    $.ajax({ url: '/api/users' })\n        .done(function(data) {\n            console.log('Success:', data);\n        })\n        .fail(function(xhr, status, error) {\n            console.error('Error:', error);\n            alert('Request failed!');\n        })\n        .always(function() {\n            $('#loading').hide(); // runs whether success or fail\n        });\n});\n\n// GOTCHA: Not real Promises! Can't use async/await directly\n// await $.get('/api/users'); // WON'T WORK!",
			ModernCode:  "// Real Promises\nfetch('/api/users').then(r => r.json())\n    .then(data => console.log('Success:', data))\n    .catch(err => console.error('Error:', err))\n    .finally(() => loading.style.display = 'none');\n\n// Works with async/await:\nconst data = await fetch('/api/users').then(r => r.json());",
			Category:    "AJAX",
		},

		// Plugin Development
		{
			Title:       "$.fn.extend - Simple Plugin Methods",
			Description: "Add methods to jQuery prototype. Wrap selection with $(this), return this for chaining.",
			JQueryCode:  "// Simple plugin method\n$.fn.highlight = function() {\n    return this.css('background-color', 'yellow');\n};\n\n// Usage:\n$('p').highlight();  // All paragraphs turn yellow\n\n// With chaining:\n$('.box').highlight().addClass('active').fadeIn();\n\n// Method that takes parameters\n$.fn.colorize = function(color) {\n    return this.css('color', color || 'red');\n};\n\n$('.text').colorize('blue').fadeToggle();",
			ModernCode:  "// Manual approach\ndocument.querySelectorAll('.text').forEach(el => {\n    el.style.color = 'blue';\n    el.classList.toggle('visible');\n});",
			Category:    "Plugin Development",
		},
		{
			Title:       "Plugin Options with Defaults",
			Description: "Use $.extend() for default + custom options. Return this for chaining.",
			HTMLCode:    "<div class=\"modal\">\n  <div class=\"title\">Default</div>\n  <button class=\"close\">✕</button>\n</div>",
			JQueryCode:  "// Plugin with options\n$.fn.modal = function(options) {\n    const settings = $.extend({\n        width: 400,\n        title: 'Modal'\n    }, options);\n    \n    return this.each(function() {\n        $(this).css({ width: settings.width });\n        $(this).find('.title').text(settings.title);\n    });\n};\n\n// Usage\n$('.modal').modal({ width: 600, title: 'Settings' });",
			ModernCode:  "class Modal {\n    constructor(element, options = {}) {\n        this.settings = { width: 400, title: 'Modal', ...options };\n        this.element = element;\n        this.init();\n    }\n    \n    init() {\n        this.element.style.width = `${this.settings.width}px`;\n        this.element.querySelector('.title').textContent = this.settings.title;\n    }\n}\n\n// Usage\nnew Modal(document.querySelector('.modal'), { width: 600, title: 'Settings' });",
			Category:    "Plugin Development",
		},
		{
			Title:       "Plugin Chainability Pattern",
			Description: "Return this to enable method chaining. Handle each element individually.",
			HTMLCode:    "<div class=\"box\">Box</div><div class=\"box\">Box 2</div>",
			JQueryCode:  "// Chainable plugin\n$.fn.colorize = function(options) {\n    const settings = $.extend({ color: 'red', size: 14 }, options);\n    \n    return this.each(function() {\n        $(this).css({\n            color: settings.color,\n            fontSize: settings.size + 'px'\n        });\n    });\n};\n\n// Usage\n$('.box').colorize({ color: 'blue' }).addClass('highlight');",
			ModernCode:  "class Colorize {\n    constructor(elements, options = {}) {\n        this.elements = Array.from(elements);\n        this.settings = { color: 'red', size: 14, ...options };\n        return this;\n    }\n    \n    css(styles) {\n        this.elements.forEach(el => Object.assign(el.style, styles));\n        return this;\n    }\n}\n\n// Usage\nnew Colorize(document.querySelectorAll('.box'), { color: 'blue' })\n    .css({ fontWeight: 'bold' });",
			Category:    "Plugin Development",
		},
		{
			Title:       "Plugin Instance Management",
			Description: "Store plugin instance to prevent re-initialization. Use .data() or element property.",
			HTMLCode:    "<div class=\"tab-container\">\n  <button class=\"tab\">Tab 1</button>\n  <button class=\"tab\">Tab 2</button>\n</div>",
			JQueryCode:  "// Prevent double-initialization\n$.fn.tabs = function() {\n    return this.each(function() {\n        const $this = $(this);\n        \n        if ($this.data('tabs-instance')) return;\n        \n        const instance = {\n            showTab: (i) => $this.find('.panel').hide().eq(i).show()\n        };\n        \n        $this.data('tabs-instance', instance);\n        $this.find('.tab').on('click', function() {\n            instance.showTab($(this).index());\n        });\n    });\n};",
			ModernCode:  "const instances = new WeakMap();\n\nclass Tabs {\n    constructor(element) {\n        if (instances.has(element)) \n            return instances.get(element);\n            \n        this.element = element;\n        instances.set(element, this);\n        this.init();\n    }\n    \n    init() {\n        // initialize tabs\n    }\n}\n\nnew Tabs(document.querySelector('.tab-container'));",
			Category:    "Plugin Development",
		},
		{
			Title:       "Plugin Cleanup Methods",
			Description: "Always provide cleanup methods to remove event listeners and data. Prevents memory leaks.",
			HTMLCode:    "<div class=\"tabs\">\n  <button class=\"tab\">Tab 1</button>\n  <button class=\"tab\">Tab 2</button>\n</div>",
			JQueryCode:  "// Plugin with cleanup method\n$.fn.tabsDestroy = function() {\n    return this.each(function() {\n        const $this = $(this);\n        const instance = $this.data('tabs-instance');\n        \n        if (instance) {\n            instance.$tabs.off('click');\n            $this.removeData('tabs-instance');\n        }\n    });\n};",
			ModernCode:  "// Class with cleanup\nclass Tabs {\n    constructor(element) {\n        this.element = element;\n        this.tabs = element.querySelectorAll('.tab');\n        element._tabsCleanup = this.destroy.bind(this);\n        this.init();\n    }\n    \n    destroy() {\n        this.element._tabsCleanup = null;\n    }\n}",
			Category:    "Plugin Development",
		},
		{
			Title:       "Plugin Pattern with State",
			Description: "Store plugin instance on element to prevent re-initialization and access methods.",
			HTMLCode:    "<div class=\"carousel\">\n  <div class=\"slide\">Slide 1</div>\n  <div class=\"slide\">Slide 2</div>\n</div>",
			JQueryCode:  "// Plugin with state management\n$.fn.carousel = function() {\n    return this.each(function() {\n        const $this = $(this);\n        \n        if ($this.data('carousel')) return;\n        \n        const carousel = {\n            interval: null,\n            start: () => carousel.interval = setInterval(() => carousel.next(), 3000),\n            next: () => $this.find('.slide').hide().eq(++carousel.currentIndex % 2).show(),\n            destroy: () => {\n                clearInterval(carousel.interval);\n                $this.removeData('carousel');\n            }\n        };\n        \n        $this.data('carousel', carousel);\n        carousel.start();\n    });\n};",
			ModernCode:  "class Carousel {\n    constructor(element) {\n        if (element.carousel) return;\n        \n        this.element = element;\n        this.currentSlide = 0;\n        element.carousel = this;\n        this.start();\n    }\n    \n    start() {\n        this.interval = setInterval(() => this.next(), 3000);\n    }\n    \n    destroy() {\n        clearInterval(this.interval);\n        this.element.carousel = null;\n    }\n}",
			Category:    "Plugin Development",
		},

		// Deferred/Promises
		{
			Title:       "$.Deferred - Basic Promise Creation",
			Description: "jQuery's Promise implementation for custom async operations. Create, resolve, reject, and chain.",
			JQueryCode:  "// Deferred for custom async operations\nfunction asyncOp() {\n    const dfd = $.Deferred();\n    \n    setTimeout(() => {\n        if (Math.random() > 0.3) {\n            dfd.resolve('Success!'); // Success callback\n        } else {\n            dfd.reject('Failed'); // Error callback\n        }\n    }, 1000);\n    \n    return dfd.promise(); // Return promise, not deferred\n}\n\n// Usage:\nasyncOp()\n    .done(data => console.log('Success:', data))\n    .fail(err => console.log('Error:', err))\n    .always(() => console.log('Finished'));\n    \n// Key points:\n// - dfd = Deferred (control object)\n// - dfd.promise() = Promise (read-only)\n// - .resolve() = success\n// - .reject() = failure\n// - .always() = runs either way",
			ModernCode:  "// Native Promises\nfunction asyncOp() {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            Math.random() > 0.3 ? resolve('Success!') : reject('Failed');\n        }, 1000);\n    });\n}\n\n// Usage:\nasyncOp()\n    .then(data => console.log('Success:', data))\n    .catch(err => console.log('Error:', err))\n    .finally(() => console.log('Finished'));",
			Category:    "Deferred/Promises",
		},
		{
			Title:       "$.Deferred - Wrap AJAX Operations",
			Description: "Use Deferred to wrap AJAX calls for better chaining. Combine traditional AJAX with promise pattern.",
			JQueryCode:  "// Wrap AJAX with Deferred\nfunction uploadFile(file) {\n    const dfd = $.Deferred();\n    \n    $.ajax({\n        url: '/upload',\n        data: { file: file },\n        success: dfd.resolve,\n        error: dfd.reject\n    });\n    \n    return dfd.promise();\n}\n\n// Usage\nuploadFile(fileInput.files[0])\n    .done(response => showSuccess('File uploaded!'))\n    .fail(xhr => showError('Upload failed'))\n    .always(() => hideProgress());",
			ModernCode:  "// Native Promise wrapping fetch\nfunction uploadFile(file) {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    return fetch('/upload', {\n        method: 'POST',\n        body: formData\n    }).then(res => res.json());\n}\n\n// Usage:\nuploadFile(fileInput.files[0])\n    .then(response => showSuccess('File uploaded!'))\n    .catch(err => showError('Upload failed'))\n    .finally(() => hideProgress());",
			Category:    "Deferred/Promises",
		},
		{
			Title:       "$.Deferred - Chain Operations",
			Description: "Chain Deferred with AJAX for complex workflows. Process responses then return new promises.",
			JQueryCode:  "// Chain AJAX calls\nfunction loadUser(userId) {\n    return $.ajax('/api/user/' + userId)\n        .then(user => $.ajax('/api/posts', { data: { userId: user.id } }))\n        .then(posts => ({ user, posts }));\n}\n\nloadUser(123)\n    .done(data => render(data.user, data.posts))\n    .fail(showError);\n\n// Manual Deferred with validation\nfunction validateEmail(email) {\n    const dfd = $.Deferred();\n    email.includes('@') ? dfd.resolve('Valid') : dfd.reject('Invalid');\n    return dfd.promise();\n}",
			ModernCode:  "// Native Promises\nfunction asyncOp() {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            Math.random() > 0.3 ? resolve('Success!') : reject('Failed');\n        }, 1000);\n    });\n}",
			Category:    "Deferred/Promises",
		},
		{
			Title:       "$.when - Wait for Multiple AJAX Requests",
			Description: "Combine multiple AJAX requests. Each argument is [data, status, xhr] array. Similar to Promise.all().",
			JQueryCode:  "// Wait for multiple operations\nconst $users = $.ajax('/api/users');\nconst $posts = $.ajax('/api/posts');\nconst $settings = $.ajax('/api/settings');\n\n$.when($users, $posts, $settings)\n    .done(function(users, posts, settings) {\n        // Each argument is [data, status, xhr] array\n        displayDashboard(users[0], posts[0], settings[0]);\n    })\n    .fail(function() {\n        console.error('Failed to load data');\n    });\n\n// Common use case: Load dashboard data\nfunction loadDashboard() {\n    return $.when(\n        $.get('/api/user/profile'),\n        $.get('/api/user/notifications'),\n        $.get('/api/analytics')\n    ).done(function(profile, notifications, analytics) {\n        updateUserInterface(profile[0]);\n        showNotifications(notifications[0]);\n        displayAnalytics(analytics[0]);\n    });\n}",
			ModernCode:  "Promise.all()\nPromise.all([\n    fetch('/api/users').then(r => r.json()),\n    fetch('/api/posts').then(r => r.json()),\n    fetch('/api/settings').then(r => r.json())\n]).then(([users, posts, settings]) => {\n    displayDashboard(users, posts, settings);\n});",
			Category:    "Deferred/Promises",
		},
		{
			Title:       "$.when - Dynamic Deferred Arrays",
			Description: "Use with $.when.apply() for variable number of deferreds. Common for form validation, batch operations.",
			JQueryCode:  "// Custom deferred operations\nfunction validateForm($form) {\n    const deferreds = $form.find('input').map(function() {\n        return validateField($(this)); // returns deferred\n    }).get();\n    \n    // Apply with context: $.when.apply($, deferreds)\n    return $.when.apply($, deferreds);\n}\n\nvalidateForm($myForm)\n    .then(() => submitForm($myForm))\n    .catch(() => showError());\n\n// Batch upload example\nfunction uploadAllFiles(files) {\n    const uploadPromises = files.map(file => {\n        return $.ajax({\n            url: '/api/upload',\n            method: 'POST',\n            data: new FormData([file])\n        });\n    });\n    \n    return $.when.apply($, uploadPromises);\n}",
			ModernCode:  "Promise.all with dynamic array\nfunction validateForm(form) {\n    const fieldPromises = Array.from(form.querySelectorAll('input'))\n        .map(field => validateField(field));\n    \n    return Promise.all(fieldPromises);\n}",
			Category:    "Deferred/Promises",
		},

		// Form Methods
		{
			Title:       ".serialize() - Create Query String",
			Description: "Convert form data to URL-encoded query string. Perfect for AJAX form submissions.",
			HTMLCode:    "<form id=\"search-form\">\n  <input name=\"q\" value=\"jquery tutorial\" />\n  <input name=\"page\" value=\"1\" />\n  <select name=\"sort\"><option value=\"relevance\" selected>Relevance</option></select>\n  <input type=\"checkbox\" name=\"videos\" checked />\n  <button type=\"submit\">Search</button>\n</form>",
			JQueryCode:  "const queryString = $('#search-form').serialize();\n// Result: \"q=jquery+tutorial&page=1&sort=relevance&videos=on\"\n\n// AJAX form submission\n$('#search-form').on('submit', function(e) {\n    e.preventDefault();\n    \n    const data = $(this).serialize();\n    \n    $.get('/api/search?' + data, function(results) {\n        displayResults(results);\n    });\n});",
			ModernCode:  "// Using URLSearchParams\nconst params = new URLSearchParams(new FormData(form));\nconst queryString = params.toString();\n// Result: \"q=jquery+tutorial&page=1&sort=relevance&videos=on\"\n\n// AJAX form submission\nfetch('/api/search?' + params.toString())\n    .then(r => r.json())\n    .then(results => displayResults(results));",
			Category:    "Form Methods",
		},
		{
			Title:       ".serializeArray() - Form to Array",
			Description: "Convert form to array of {name, value} objects. Good for custom processing.",
			HTMLCode:    "<form id=\"profile-form\">\n  <input name=\"name\" value=\"John\" />\n  <input name=\"email\" value=\"john@example.com\" />\n  <input name=\"age\" value=\"30\" />\n</form>",
			JQueryCode:  "Get form as object array\nconst formData = $('#profile-form').serializeArray();\n/* Result:\n[\n    {name: \"name\", value: \"John\"},\n    {name: \"email\", value: \"john@example.com\"},\n    {name: \"age\", value: \"30\"}\n]\n*/\n\n// Use case: Custom validation\nfunction validateForm(formData) {\n    return formData.every(field => field.value.trim() !== '');\n}\n\nif (!validateForm($('form').serializeArray())) {\n    alert('Please fill all fields');\n}",
			ModernCode:  "Manual version\nconst formArray = Array.from(new FormData(form).entries())\n    .map(([name, value]) => ({name, value}));",
			Category:    "Form Methods",
		},
		{
			Title:       "Convert Form to Plain Object",
			Description: "Transform serializeArray() result into {key: value} object. Most common use case for JSON APIs.",
			HTMLCode:    "<form id=\"profile-form\">\n  <input name=\"name\" value=\"John\" />\n  <input name=\"email\" value=\"john@example.com\" />\n  <input name=\"age\" value=\"30\" />\n  <input type=\"checkbox\" name=\"newsletter\" checked />\n  <button type=\"submit\">Save</button>\n</form>",
			JQueryCode:  "Convert form array to plain object\nconst formObj = {};\n$.each($('#profile-form').serializeArray(), function(i, field) {\n    formObj[field.name] = field.value;\n});\n// Result: {name: \"John\", email: \"john@example.com\", age: \"30\", newsletter: \"on\"}\n\n// AJAX with JSON - MOST COMMON PATTERN\n$('#profile-form').on('submit', function(e) {\n    e.preventDefault();\n    \n    const data = {};\n    $.each($(this).serializeArray(), function(i, field) {\n        data[field.name] = field.value;\n    });\n    \n    $.ajax({\n        url: '/api/user',\n        method: 'POST',\n        contentType: 'application/json',\n        data: JSON.stringify(data)\n    });\n});",
			ModernCode:  "Much simpler!\nconst data = Object.fromEntries(new FormData(form));\nfetch('/api/user', {\n    method: 'POST',\n    headers: {'Content-Type': 'application/json'},\n    body: JSON.stringify(data)\n});",
			Category:    "Form Methods",
		},

		// Position & Dimensions
		{
			Title:       ".offset() vs .position()",
			Description: ".offset() = position relative to document. .position() = relative to offset parent. Use .offset() for absolute positioning.",
			HTMLCode:    "<div style=\"margin:50px;\">\n  <div id=\"parent\" style=\"position:relative; top:20px; left:30px;\">\n    <button id=\"child\">Button</button>\n  </div>\n</div>\n<div class=\"tooltip\" style=\"display:none; position:absolute;\">Tooltip</div>",
			JQueryCode:  "const $child = $('#child');\nconst offset = $child.offset();\nconst position = $child.position();\n\n// offset: {top: 70, left: 80} (from document origin)\n// = margin(50) + parent.top(20) = 70px from top\n// = margin(50) + parent.left(30) = 80px from left\n\n// position: {top: 0, left: 0} (from #parent)\n// = button has no positioning relative to its parent\n\n// Use cases:\n$child.css({\n    position: 'absolute',\n    top: offset.top + 'px',  // Position absolutely at current spot\n    left: offset.left + 'px'\n});\n\n// Tooltip positioning relative to button\nconst tooltip = $('.tooltip');\ntooltip.offset({\n    top: $child.offset().top + $child.outerHeight(),\n    left: $child.offset().left + ($child.outerWidth() / 2) - (tooltip.outerWidth() / 2)\n});",
			ModernCode:  "const rect = child.getBoundingClientRect();\nconst offsetTop = window.scrollY + rect.top;\nconst offsetLeft = window.scrollX + rect.left;",
			Category:    "Position & Dimensions",
		},
		{
			Title:       "Width Methods: .width() vs .innerWidth() vs .outerWidth()",
			Description: ".width() = content width. .innerWidth() = content + padding. .outerWidth() = content + padding + border. +true includes margin.",
			HTMLCode:    "<div class=\"box\" style=\"width:200px; padding:20px; border:5px solid black; margin:10px;\">Content</div>",
			JQueryCode:  "$('.box').width();       // 200px (content only)\n$('.box').innerWidth();  // 240px (content + padding: 200 + 20+20)\n$('.box').outerWidth();  // 250px (content + padding + border: 200 + 40 + 5+5)\n$('.box').outerWidth(true); // 270px (includes margins: 250 + 10+10)\n\n// Set dimensions:\n$('.box').width(300);        // Sets content width to 300px\n$('.box').innerWidth(300);   // Sets content+padding to 300px\n$('.box').outerWidth(300);   // Sets content+padding+border to 300px",
			ModernCode:  "box.offsetWidth;   // Including border + padding (like outerWidth)\nbox.clientWidth;   // Content + padding (like innerWidth)",
			Category:    "Position & Dimensions",
		},
		{
			Title:       "Practical Width Calculations",
			Description: "Common use cases for width methods: centering, responsive checks, tooltip positioning.",
			HTMLCode:    "<div class=\"sidebar\" style=\"width:300px; position:absolute;\">Sidebar</div>\n<div class=\"main-content\" style=\"width:1200px;\">Main</div>\n<button id=\"button\">Hover me</button>\n<div class=\"tooltip\" style=\"display:none; position:absolute;\">Tooltip text</div>",
			JQueryCode:  "// Common width use cases\n\n// Center element\nfunction centerElement($elem) {\n    const width = $elem.outerWidth();\n    $elem.css('left', `calc(50% - ${width/2}px)`);\n}\n\n// Responsive check\nfunction checkFit($elem, $container) {\n    return $elem.outerWidth() <= $container.width();\n}\n\nif (!checkFit($('.sidebar'), $('.main-content'))) {\n    $('.sidebar').css('font-size', '12px');\n}\n\n// Tooltip positioning\n$('.tooltip').offset({\n    top: $button.offset().top + $button.outerHeight(),\n    left: $button.offset().left + ($button.outerWidth() / 2) - ($('.tooltip').outerWidth() / 2)\n});",
			ModernCode:  "// Same patterns\nfunction centerElement(elem) {\n    const width = elem.offsetWidth;\n    elem.style.left = `calc(50% - ${width/2}px)`;\n}",
			Category:    "Position & Dimensions",
		},

		// Scroll Methods
		{
			Title:       ".scrollTop() / .scrollLeft() - Get Position",
			Description: "Get current scroll position. Use for scroll tracking, endless scrolling, lazy loading.",
			HTMLCode:    "<div id=\"content\" style=\"height:300px; overflow-y:scroll; border:1px solid #ccc; padding:10px;\">\n  <div style=\"height:500px;\">Scrollable content with many elements...</div>\n  <div style=\"height:500px;\">More content to enable scrolling...</div>\n</div>\n<button id=\"scroll-top\" style=\"display:none; position:fixed; top:10px; right:10px;\">↑ Top</button>\n<div class=\"scroll-progress\" style=\"position:fixed; top:0; left:0; height:3px; background:blue; width:0;\"></div>",
			JQueryCode:  "// Get scroll position and track scrolling\n$('#content').on('scroll', function() {\n    const scrollPos = $(this).scrollTop();\n    const totalHeight = $(this)[0].scrollHeight;\n    const visibleHeight = $(this).height();\n    \n    // Show scroll-to-top when scrolled down\n    $('#scroll-top').toggle(scrollPos > 100);\n    \n    // Endless scrolling - load more when near bottom\n    if (scrollPos + visibleHeight >= totalHeight - 50) {\n        loadMoreContent();\n    }\n    \n    // Progress indicator\n    const scrollPercent = (scrollPos / (totalHeight - visibleHeight)) * 100;\n    $('.scroll-progress').css('width', scrollPercent + '%');\n});",
			ModernCode:  "// Same tracking\ncontent.addEventListener('scroll', () => {\n    const scrollPos = content.scrollTop;\n    const totalHeight = content.scrollHeight;\n    const visibleHeight = content.clientHeight;\n    \n    scrollTopBtn.style.display = scrollPos > 100 ? 'block' : 'none';\n    \n    if (scrollPos + visibleHeight >= totalHeight - 50) {\n        loadMoreContent();\n    }\n});",
			Category:    "Scroll Methods",
		},
		{
			Title:       ".scrollTop() / .scrollLeft() - Set Position",
			Description: "Set scroll position. Use for scroll-to-top buttons, smooth scrolling to sections.",
			HTMLCode:    "<button id=\"scroll-top\">Back to Top</button>\n<div id=\"content\" style=\"height:300px; overflow-y:scroll;\">\n  <div id=\"section1\" style=\"height:500px;\">Section 1</div>\n  <div id=\"section2\" style=\"height:500px;\">Section 2</div>\n</div>\n<a href=\"#section2\">Go to Section 2</a>",
			JQueryCode:  "// Set scroll position\n$('#scroll-top').on('click', function() {\n    $('#content').scrollTop(0); // Scroll to top\n});\n\n// Scroll to specific position\n$('#content').scrollTop(500); // Scroll 500px down\n\n// Smooth scroll to section\n$('a[href=\"#section2\"]').on('click', function(e) {\n    e.preventDefault();\n    $('#section2')[0].scrollIntoView({ behavior: 'smooth' });\n});\n\n// Animate scroll with jQuery\n$('#content').animate({ scrollTop: 0 }, 500); // Smooth scroll to top",
			ModernCode:  "// Set scroll position\nscrollTopBtn.addEventListener('click', () => {\n    content.scrollTop = 0; // Instant scroll\n});\n\n// Smooth scroll\nsection.scrollIntoView({ behavior: 'smooth' });\n\n// Scroll to position\ncontent.scrollTop = 500;",
			Category:    "Scroll Methods",
		},
		{
			Title:       "Window Scroll with Throttling",
			Description: "Track page scroll for navigation effects, parallax. Always throttle scroll events for performance.",
			HTMLCode:    "<nav style=\"position:fixed; top:0; width:100%;\">Navigation</nav>\n<div class=\"scroll-progress\" style=\"position:fixed; top:0; height:3px; background:blue; width:0;\"></div>\n<div class=\"parallax-bg\" style=\"height:500px; background:url('bg.jpg');\">Parallax Background</div>\n<div style=\"height:2000px;\">Long content for scrolling...</div>",
			JQueryCode:  "// Window scroll with throttling\nlet scrollTimeout;\n$(window).on('scroll', function() {\n    // Throttle: Only run every 100ms (prevents lag)\n    clearTimeout(scrollTimeout);\n    scrollTimeout = setTimeout(() => {\n        const scrollTop = $(this).scrollTop();\n        \n        // Sticky navigation\n        $('nav').toggleClass('sticky', scrollTop > 50);\n        \n        // Progress indicator\n        const scrollPercent = (scrollTop / (document.scrollHeight - window.innerHeight)) * 100;\n        $('.scroll-progress').css('width', scrollPercent + '%');\n        \n        // Parallax effect\n        $('.parallax-bg').css('transform', `translateY(${scrollTop * 0.5}px)`);\n    }, 100);\n});",
			ModernCode:  "// Same throttling pattern\nlet scrollTimeout;\nwindow.addEventListener('scroll', () => {\n    clearTimeout(scrollTimeout);\n    scrollTimeout = setTimeout(() => {\n        const scrollTop = window.scrollY;\n        nav.classList.toggle('sticky', scrollTop > 50);\n    }, 100);\n});",
			Category:    "Scroll Methods",
		},
		{
			Title:       "Intersection Observer for Performance",
			Description: "Modern replacement for scroll event listeners. Automatically handles visibility detection for lazy loading.",
			JQueryCode:  "// fallback for browsers without Intersection Observer\nif (!window.IntersectionObserver) {\n    $(window).on('scroll', throttle(handleLazyLoad, 100));\n}\n\nfunction throttle(func, limit) {\n    let inThrottle;\n    return function() {\n        if (!inThrottle) {\n            func.apply(this, arguments);\n            inThrottle = true;\n            setTimeout(() => inThrottle = false, limit);\n        }\n    };\n}",
			ModernCode:  "// Intersection Observer (best performance)\nconst observer = new IntersectionObserver(\n    (entries) => {\n        entries.forEach(entry => {\n            if (entry.isIntersecting) {\n                // Element is visible in viewport\n                entry.target.classList.add('visible');\n                \n                // Lazy load images\n                if (entry.target.dataset.src) {\n                    entry.target.src = entry.target.dataset.src;\n                    entry.target.classList.remove('lazy-load');\n                }\n            }\n        });\n    },\n    { threshold: 0.1 } // Trigger when 10% visible\n);\n\n// Observe elements for lazy loading\ndocument.querySelectorAll('.lazy-load').forEach(el => {\n    observer.observe(el);\n});",
			Category:    "Scroll Methods",
		},
		{
			Title:       "requestAnimationFrame for Smooth Scrolling",
			Description: "Use rAF for smooth scroll handling. Better than setTimeout for animations and visual updates.",
			JQueryCode:  "version with rAF\nlet ticking = false;\nconst updateScroll = () => {\n    const scrollTop = $(window).scrollTop();\n    $('.parallax-bg').css('transform', `translateY(${scrollTop * 0.5}px)`);\n    ticking = false;\n};\n\n$(window).on('scroll', () => {\n    if (!ticking) {\n        requestAnimationFrame(updateScroll);\n        ticking = true;\n    }\n});",
			ModernCode:  "Smooth scroll with requestAnimationFrame\nlet ticking = false;\nfunction updateOnScroll() {\n    const scrollTop = window.scrollY;\n    \n    // Update UI here (runs at 60fps when scrolling)\n    const scrollPercent = (scrollTop / (document.scrollHeight - window.innerHeight)) * 100;\n    document.querySelector('.scroll-progress').style.width = scrollPercent + '%';\n    \n    // Parallax effect\n    document.querySelector('.parallax-bg').style.transform = \n        `translateY(${scrollTop * 0.5}px)`;\n    \n    ticking = false;\n}\n\nwindow.addEventListener('scroll', () => {\n    if (!ticking) {\n        requestAnimationFrame(updateOnScroll);\n        ticking = true;\n    }\n});",
			Category:    "Scroll Methods",
		},

		// Element Wrapping & Replacement
		{
			Title:       ".wrap() / .wrapAll() / .unwrap()",
			Description: "Wrap elements with other elements. .wrap() wraps individually, .wrapAll() wraps all matching elements together.",
			HTMLCode:    "<button>Button 1</button>\n<button>Button 2</button>\n<input class=\"input-field\" />\n<div class=\"checkbox-group\">\n  <input type=\"checkbox\" />\n  <input type=\"checkbox\" />\n</div>",
			JQueryCode:  "$('button').wrap('<div class=\"btn-wrapper\"></div>');\n$('button').wrapAll('<div class=\"btn-group\"></div>');\n$('.btn-wrapper button').unwrap();\n$('.input-field').wrap('<div class=\"field-group\"></div>');\n$('.checkbox-group input').wrapAll('<div class=\"checkbox-container\"></div>');",
			ModernCode:  "buttons.forEach(btn => {\nconst wrapper = document.createElement('div');\nwrapper.className = 'btn-wrapper';\nbtn.parentNode.insertBefore(wrapper, btn);\nwrapper.appendChild(btn);\n});",
			Category:    "DOM Manipulation",
		},
		{
			Title:       ".replaceWith() / .replaceAll()",
			Description: "Replace elements with new content. .replaceWith() replaces matched elements, .replaceAll() replaces target elements.",
			HTMLCode:    "<div id=\"old-content\">Old content here</div>\n<button class=\"upgrade\">Upgrade v1</button>\n<button class=\"upgrade\">Upgrade v1</button>",
			JQueryCode:  "Replace element with new content\n$('#old-content').replaceWith('<div id=\"new-content\">New content</div>');\n// old-content div is gone, new-content div takes its place\n\n// Replace multiple elements\n$('.upgrade').replaceWith('<button class=\"upgrade-v2\">Upgrade New</button>');\n\n// Using jQuery object to replace\nconst $newButton = $('<button class=\"submit\">Submit</button>');\n$('.upgrade').replaceWith($newButton);\n3.4+: replaceAll()\n$('<button class=\"submit\">Submit</button>').replaceAll('.upgrade');\n// Same result as replaceWith() but in reverse order",
			ModernCode:  "outerHTML property\ndocument.getElementById('old-content').outerHTML = \n    '<div id=\"new-content\">New content</div>';\n\n// For multiple elements\ndocument.querySelectorAll('.upgrade').forEach(el => {\n    el.outerHTML = '<button class=\"submit\">Submit</button>';\n});",
			Category:    "DOM Manipulation",
		},

		// Version Migration
		{
			Title:       "jQuery 2.x vs 3.x - API Changes",
			Description: "Major breaking changes: width/height return integers, .attr() returns undefined, deprecated methods removed.",
			JQueryCode:  "2.x vs 3.x API changes:\n\n// 1. Width/Height always return integers\n$('#box').width(); // 2.x: could return float (150.5), 3.x: always int (151)\n// Affects precision calculations\n\n// 2. .attr() returns undefined vs null\n$('div').attr('nonexistent'); // 2.x: null, 3.x: undefined\n\n// 3. Removed deprecated methods\n$('.item').toggle(); // REMOVED in 3.0 (show/hide toggle)\n$('.item').toggle(fast); // REMOVED\n// Still exists as visibility toggle:\n$('.item').toggle(); // Show if hidden, hide if visible\n\n// 4. Promise behavior changes\n$.Deferred().resolve().then(fn).then(fn2); // 3.x: more Promise-like\n\n// 5. Event handlers: this vs currentTarget\n$('#btn').on('click', function(e) {\n    // In 3.x edge cases, use e.currentTarget\n    $(e.currentTarget).addClass('clicked');\n});",
			Category:    "Version Migration",
		},
		{
			Title:       "jQuery 2.x vs 3.x - Migration Patterns",
			Description: "Compatibility patterns and fixes for upgrading. Use these patterns for both versions.",
			JQueryCode:  "// Migration patterns for 2.x/3.x compatibility:\n\n// Width/Height compatibility\nfunction getWidth($el) {\n    return Math.round($el.width()); // Ensure integer for both versions\n}\n\n// Attribute check compatibility\nfunction hasAttr($el, attr) {\n    return $el.attr(attr) !== undefined && $el.attr(attr) !== null;\n}\n\n// Use cases:\nconst width = getWidth($('.sidebar'));\nif (hasAttr($('.button'), 'data-action')) {\n    $('.button').on('click', handler);\n}\n\n// Other compatibility fixes:\n// - Use .data() instead of .attr('data-*') for consistency\n// - Replace removed .toggle() animations with .fadeIn()/.fadeOut()\n// - Check Promise compatibility with jQuery version",
			Category:    "Version Migration",
		},
		{
			Title:       "Gradual Migration Strategy",
			Description: "Replace DOM ops first, keep complex utilities last. Use feature detection.",
			JQueryCode:  "// Phase 1: Replace simple DOM ops\n// OLD:\n$('.item').addClass('active');\n// NEW:\ndocument.querySelectorAll('.item').forEach(el => el.classList.add('active'));\n\n// Phase 2: Keep jQuery utilities\n$(document).on('click', '.dynamic button', handler);\n\n// Phase 3: Replace AJAX last\n// Keep: $.ajax()\n// Replace: fetch()",
			Category:    "Version Migration",
		},

		// Utilities
		{
			Title:       "$.each() vs .each()",
			Description: "$.each() for arrays/objects. .each() for jQuery collections. NOTE: Parameter order differs from native forEach!",
			JQueryCode:  "Iterate over array\n$.each([10, 20, 30], function(index, value) {\n    console.log(index, value);  // 0 10, 1 20, 2 30\n});\nIterate over object\nconst config = { host: 'localhost', port: 3000 };\n$.each(config, function(key, value) {\n    console.log(key + ':', value);  // \"host: localhost\", \"port: 3000\"\n});\nIterate over jQuery collection\n$('.item').each(function(index, element) {\n    const id = $(this).data('id');\n    console.log(index, id);  // 0 \"1\", 1 \"2\"\n});\n\n// GOTCHA: Parameter order! jQuery uses (index, value)",
			ModernCode:  "uses (value, index)\n[10, 20, 30].forEach((value, index) => console.log(index, value));\nObject.entries(config).forEach(([key, val]) => console.log(key, val));\ndocument.querySelectorAll('.item').forEach((el, i) => { /* ... */ });",
			Category:    "Utilities",
		},
		{
			Title:       "$.map() / $.grep()",
			Description: "$.map() transforms array. $.grep() filters array. Works on arrays AND objects. Now use native methods instead.",
			JQueryCode:  "$.map(): Transform array\nconst prices = [10, 20, 30];\nconst withTax = $.map(prices, n => n * 1.1);  // [11, 22, 33]\n$.grep(): Filter array\nconst expensive = $.grep(prices, n => n > 15);  // [20, 30]\n\n// Real use case: Extract values from inputs\nconst values = $.map($('.price'), function(input) {\n    return parseFloat($(input).val());\n});  // [10, 25, 5]",
			ModernCode:  "// Native methods (preferred)\nconst withTax = prices.map(n => n * 1.1);\nconst expensive = prices.filter(n => n > 15);\nconst values = [...document.querySelectorAll('.price')]\n    .map(input => parseFloat(input.value));",
			Category:    "Utilities",
		},
		{
			Title:       "$.extend() - Merge Objects",
			Description: "Merge objects. GOTCHA: First object is MUTATED! Use empty object {} as target.",
			JQueryCode:  "Merge objects\nconst obj1 = { a: 1, b: 2 };\nconst obj2 = { b: 3, c: 4 };\n\n// WRONG: Mutates obj1!\nconst result = $.extend(obj1, obj2);\n// Now obj1 = { a: 1, b: 3, c: 4 } (changed!)\n\n// CORRECT: Merge into new object\nconst result = $.extend({}, obj1, obj2);\n// obj1 unchanged, result = { a: 1, b: 3, c: 4 }\n\n// Deep merge: $.extend(true, {}, ...)\nconst obj1 = { nested: { x: 10 } };\nconst obj2 = { nested: { y: 20 } };\n$.extend(obj1, obj2);  // shallow: nested = { y: 20 } (x lost!)\n$.extend(true, {}, obj1, obj2);  // deep: nested = { x: 10, y: 20 }",
			ModernCode:  "const merged = { ...obj1, ...obj2 };  // shallow\nconst deep = structuredClone(obj1);   // deep copy",
			Category:    "Utilities",
		},
		{
			Title:       "$.trim() / $.isArray() / $.isFunction()",
			Description: "Utility functions for common checks. Mostly replaced by native JS methods now.",
			JQueryCode:  "// utilities:\n$.trim('  hello  ');        // \"hello\"\n$.isArray([1, 2, 3]);       // true\n$.isFunction(alert);        // true  \n$.isNumeric('123');         // true\n$.type(null);               // \"null\" (not \"object\"!)\n\n// Use case: Form validation\nconst val = $.trim($('#username').val());\nif (val && $.isNumeric(val)) { /* valid */ }",
			ModernCode:  "// preferred:\n'  hello  '.trim();\nArray.isArray([1, 2, 3]);\ntypeof alert === 'function';\n!isNaN(parseFloat('123')) && isFinite('123');",
			Category:    "Utilities",
		},
		{
			Title:       "$(document).ready()",
			Description: "Execute code when DOM is fully loaded. Shorthand: $(function() {}). Most common jQuery pattern.",
			JQueryCode:   "// jQuery: Most common pattern\n$(document).ready(function() {\n    $('#app').text('Ready!');\n    initializeWidgets();\n});\n\n// Shorthand (preferred):\n$(function() {\n    $('#app').text('Ready!');\n});\n\n// Multiple handlers (all run):\n$(function() { console.log('First'); });\n$(function() { console.log('Second'); });",
			ModernCode:   "// Modern JS:\ndocument.addEventListener('DOMContentLoaded', () => {\n    app.textContent = 'Ready!';\n});\n\n// Or use <script defer> or <script type=\"module\">\n// These automatically wait for DOM to be ready",
			Category:    "Utilities",
		},
		{
			Title:       "GOTCHA: ready() vs load()",
			Description: "$(document).ready() runs BEFORE images load! Image dimensions might be 0. Use $(window).on('load') for images.",
			JQueryCode:   "// WRONG: Image might not be loaded yet\n$(function() {\n    const height = $('#hero-image').height();\n    console.log(height);  // Might be 0!\n});\n\n// CORRECT: Wait for ALL resources (images, CSS, etc)\n$(window).on('load', function() {\n    const height = $('#hero-image').height();\n    console.log(height);  // Correct height\n});\n\n// Or wait for specific image\n$('#hero-image').on('load', function() {\n    console.log($(this).height());  // Image loaded\n});",
			ModernCode:   "// Modern JS:\nwindow.addEventListener('load', () => {\n    // All resources loaded\n});\n\nimage.addEventListener('load', () => {\n    // This image loaded\n});",
			Category:    "Utilities",
		},

		// Performance & Best Practices
		{
			Title:       "js- Prefix Convention",
			Description: "Use js- prefix for classes used ONLY by JavaScript, not CSS. Prevents conflicts when refactoring styles. Common in large/legacy codebases.",
			JQueryCode:  "// Use js- prefix for JavaScript hooks, not styling\n$('.js-submit').on('click', handleSubmit);\n$('.js-delete').on('click', handleDelete);\n$('.js-toggle-menu').on('click', toggleMenu);\n\n// Why? Prevents CSS refactoring from breaking JS\n// Designer changes .submit to .btn-primary\n// But .js-submit stays, so JS keeps working!",
			ModernCode:  "document.querySelectorAll('.js-submit').forEach(btn => \n    btn.addEventListener('click', handleSubmit)\n);",
			Category:    "Best Practices",
		},
		{
			Title:       "data-* Attributes for JavaScript Data",
			Description: "Store data IN HTML using data-* attributes. jQuery's .data() provides easy access. Better than using classes or IDs for data.",
			JQueryCode:  "// Store and retrieve data from HTML\nconst userId = $('.user-btn').data('user-id');    // \"123\"\nconst price = $('.product').data('price');         // 29.99\n$('.item').data('stock', 10);                     // sets data-stock=\"10\"\n\n// Real use case: Delete button with user ID\n$('.js-delete-user').on('click', function() {\n    const userId = $(this).data('user-id');\n    deleteUser(userId);\n});\n\n// Why data-* attributes?\n// - Clean HTML/JS separation\n// - Better than hiding data in classes/IDs\n// - jQuery auto-converts to correct types (numbers, booleans)",
			ModernCode:  "const userId = btn.dataset.userId;    // \"123\" (camelCase)\nconst price = div.dataset.price;      // \"29.99\"\nbtn.dataset.stock = 10;               // set data-stock\n\n// Why? Clean separation: HTML for data, JS for behavior, CSS for style",
			Category:    "Best Practices",
		},
		{
			Title:       "Variable Naming: $ Prefix Convention",
			Description: "Use $ prefix for jQuery objects to distinguish from DOM elements. Prevents mistakes like calling .addClass() on wrong type.",
			JQueryCode:  "object (1 element)\nconst $deleteBtns = $('.delete-btn');\nobject (2 elements)\n\n// Compare to vanilla JS:\nconst submitBtn = document.getElementById('submit-btn');  // DOM element\nconst deleteBtns = document.querySelectorAll('.delete-btn'); // NodeList\n\n// Why $ prefix matters:\n$submitBtn.addClass('active');   // ✓ Works (jQuery method)\nsubmitBtn.addClass('active');    // ✗ ERROR! DOM element doesn't have .addClass\nsubmitBtn.classList.add('active'); // ✓ Works (DOM method)\n\n// PROBLEM: Naming conflicts in large apps (see next tidbit)",
			ModernCode:  "// No need for $ prefix with vanilla JS - types are clear\nconst submitBtn = document.getElementById('submit-btn');\nconst deleteBtns = document.querySelectorAll('.delete-btn');\n\nsubmitBtn.classList.add('active');\ndeleteBtns.forEach(btn => btn.addEventListener('click', handler));",
			Category:    "Best Practices",
		},
		{
			Title:       "Namespacing Variables in Large Apps",
			Description: "Add module/page prefix to prevent naming conflicts when multiple scripts use same variable names. Common in legacy/enterprise apps.",
			JQueryCode:  "const $submitBtn = $('#submit');  // Users page submit\nconst $submitBtn = $('#submit');  // Reports page submit\nconst users_$submitBtn = $('#submit');    // users.js\nconst reports_$submitBtn = $('#submit');  // reports.js\nconst dashboard_$submitBtn = $('#submit'); // dashboard.js\nconst Users = {\n$submitBtn: $('#submit'),\n$userTable: $('#users'),\ninit: function() { /* ... */ }\n};\nconst Reports = {\n$submitBtn: $('#submit'),\n$reportTable: $('#reports'}\n};\nUsers.$submitBtn.on('click', handler);\nconst app_$submitBtn = $('#submit');\nconst myApp_$userList = $('#users');",
			ModernCode:  "// Modern: Use ES6 modules for automatic namespacing\n// users.js\nexport const submitBtn = document.getElementById('submit');\nexport const userTable = document.getElementById('users');\n\n// reports.js  \nexport const submitBtn = document.getElementById('submit');\nexport const reportTable = document.getElementById('reports');\n\n// main.js\nimport * as Users from './users.js';\nimport * as Reports from './reports.js';\nUsers.submitBtn.addEventListener('click', handler);",
			Category:    "Best Practices",
		},
		{
			Title:       "Avoiding Selector Collisions",
			Description: "Be specific with selectors to avoid accidentally targeting wrong elements. Use IDs, js- classes, or context.",
			HTMLCode:    "Modal close\nSidebar close",
			JQueryCode:  "// WRONG: Too broad, targets both close buttons\n$('.close').on('click', function() {\n    $(this).closest('.modal').hide();  // Breaks sidebar!\n});\n\n// CORRECT: Be specific\n$('.modal .close').on('click', function() {\n    $(this).closest('.modal').hide();\n});\n$('.sidebar .close').on('click', function() {\n    $(this).closest('.sidebar').hide();\n});\n\n// BETTER: Use js- prefix or unique IDs\n$('.js-modal-close').on('click', closeModal);\n$('.js-sidebar-close').on('click', closeSidebar);",
			ModernCode:  "// Modern: Use specific selectors or context\ndocument.querySelectorAll('.modal .close').forEach(btn => \n    btn.addEventListener('click', closeModal)\n);",
			Category:    "Best Practices",
		},
		{
			Title:       "Cache jQuery Selectors",
			Description: "Store jQuery objects in variables instead of re-selecting. Each $() searches DOM again.",
			JQueryCode:  "BAD:\n$('#box').css('color', 'red');\n$('#box').addClass('active');\n$('#box').fadeIn();\nGOOD:\nconst $box = $('#box');\n$box.css('color', 'red').addClass('active').fadeIn();",
			ModernCode:  "Same principle applies\nconst box = document.getElementById('box');\nbox.style.color = 'red';\nbox.classList.add('active');",
			Category:    "Best Practices",
		},
		{
			Title:       "Method Chaining",
			Description: "Most jQuery methods return jQuery object, allowing chaining. Makes code concise.",
			JQueryCode:  "$('#box')\n    .addClass('active')\n    .css('color', 'red')\n    .fadeIn();",
			ModernCode:  "Limited chaining, use multiple lines or helper\nbox.classList.add('active');\nObject.assign(box.style, { color: 'red', display: 'block' });\n// Or create a tiny helper:\nconst chain = (el) => ({\n    addClass: (cls) => (el.classList.add(cls), chain(el)),\n    css: (styles) => (Object.assign(el.style, styles), chain(el))\n});\nchain(box).addClass('active').css({ color: 'blue' });",
			Category:    "Best Practices",
		},
		{
			Title:       "Namespaced Events",
			Description: "Add .namespace to events to remove specific handlers without affecting others. Critical in large apps with multiple scripts.",
			HTMLCode:    "<button id=\"btn\">Click me</button>",
			JQueryCode:  "// Problem: Multiple scripts attach handlers\n$('#btn').on('click', handler1);  // Script A\n$('#btn').on('click', handler2);  // Script B\n$('#btn').off('click');           // REMOVES BOTH! Script B breaks Script A\n\n// Solution: Namespace events with .moduleName\n$('#btn').on('click.moduleA', handler1);  // Script A\n$('#btn').on('click.moduleB', handler2);  // Script B\n$('#btn').off('click.moduleB');           // Only removes handler2!\n\n// Can remove all events from a namespace\n$('#btn').off('.moduleA');  // removes ALL moduleA events\n\n// Multiple namespaces\n$('#btn').on('click.myApp.tracking', handler);\n$('#btn').off('.tracking');  // removes all tracking events across app",
			ModernCode:  "// Modern: Track handlers in a Map or WeakMap\nconst handlers = new Map();\n\nfunction addHandler(element, event, namespace, handler) {\n    const key = `${event}.${namespace}`;\n    if (!handlers.has(element)) handlers.set(element, new Map());\n    handlers.get(element).set(key, handler);\n    element.addEventListener(event, handler);\n}\n\nfunction removeHandler(element, namespace) {\n    if (!handlers.has(element)) return;\n    const elementHandlers = handlers.get(element);\n    for (const [key, handler] of elementHandlers.entries()) {\n        if (key.includes(namespace)) {\n            const event = key.split('.')[0];\n            element.removeEventListener(event, handler);\n            elementHandlers.delete(key);\n        }\n    }\n}\n\n// Usage:\naddHandler(btn, 'click', 'moduleA', handler1);\naddHandler(btn, 'click', 'moduleB', handler2);\nremoveHandler(btn, 'moduleB');  // Only removes handler2",
			Category:    "Best Practices",
		},
		{
			Title:       "IIFE Pattern - Avoid Global Scope",
			Description: "Wrap code in Immediately Invoked Function Expression to avoid polluting global scope. Standard in jQuery codebases.",
			JQueryCode:  "// BAD - pollutes global scope\nvar myVar = 123;\nvar $button = $('#btn');\nfunction myFunction() { }\n// Now myVar, $button, myFunction are global (conflicts possible!)\n\n// GOOD - IIFE pattern (Immediately Invoked Function Expression)\n(function($) {\n    'use strict';  // enable strict mode\n    \n    var myVar = 123;           // local to this scope\n    var $button = $('#btn');   // local to this scope\n    \n    function myFunction() { }  // local to this scope\n    \n    // Your app code here\n    $button.on('click', myFunction);\n    \n})(jQuery);  // pass jQuery as $\n\n// Why? Variables are contained, no conflicts with other scripts\n// Common pattern in plugins and large apps",
			ModernCode:  "// Modern: Use ES6 modules (auto-scoped) or block scope\n{\n    const myVar = 123;           // block-scoped\n    const button = document.getElementById('btn');\n    function myFunction() { }    // block-scoped\n    \n    button.addEventListener('click', myFunction);\n}\n\n// Or use ES6 modules (even better):\n// All code in modules is automatically scoped",
			Category:    "Best Practices",
		},
		{
			Title:       "Module Pattern - Page-Specific Init",
			Description: "Organize code by module with init() function. Check if page elements exist before initializing.",
			JQueryCode:  "// Module Pattern: Only run if page has required elements\nvar UserManagement = (function($) {\n    'use strict';\n    \n    // Private variables\n    var $userTable, $deleteBtn;\n    \n    // Public init function\n    function init() {\n        // Only run if we're on the user management page\n        if ($('#user-management-page').length === 0) {\n            return;  // Exit early if wrong page\n        }\n        \n        // Cache selectors\n        $userTable = $('#user-table');\n        $deleteBtn = $('.js-delete-user');\n        \n        // Only bind events if elements exist\n        $deleteBtn.on('click.userMgmt', handleDelete);\n    }\n    \n    return {\n        init: init\n    };\n})(jQuery);\n\n// Multiple modules in main.js\n$(document).ready(function() {\n    UserManagement.init();    // Only runs on user page\n    Dashboard.init();         // Only runs on dashboard\n    Reports.init();           // Only runs on reports",
			ModernCode:  "// Modern ES6 class pattern\nclass UserManagement {\n    static init() {\n        const page = document.getElementById('user-management-page');\n        if (!page) return; // Exit if wrong page\n        \n        this.userTable = document.getElementById('user-table');\n        this.deleteBtn = document.querySelectorAll('.js-delete-user');\n        \n        this.deleteBtn.forEach(btn => \n            btn.addEventListener('click', this.handleDelete)\n        );\n    }\n    \n    static handleDelete(e) { /* ... */ }\n}\n\n// main.js\nUserManagement.init();\nDashboard.init();",
			Category:    "Best Practices",
		},
		{
			Title:       "Module Pattern - Public API",
			Description: "Expose public methods in return object. Other modules can call these methods for inter-module communication.",
			JQueryCode:  "// Module with public methods\nclass ShoppingCart {\n    static init() {\n        this.$cart = $('.shopping-cart');\n        this.$items = $('.cart-item');\n        this.total = 0;\n        this.updateTotal();\n    }\n    \n    // Public method - other modules can call\n    static addItem(itemName, price) {\n        const $newItem = $('<div class=\"cart-item\">')\n            .text(itemName).data('price', price);\n        this.$cart.append($newItem);\n        this.updateTotal();\n    }\n    \n    static getTotal() {\n        return this.total;\n    }\n}\n\n// Usage:\nShoppingCart.init();\nShoppingCart.addItem('Widget', 29.99);\nconsole.log(ShoppingCart.getTotal());",
			ModernCode:  "// Modern ES6 class with public methods\nclass ShoppingCart {\n    static cart = null;\n    static total = 0;\n    \n    static init() {\n        this.cart = document.querySelector('.shopping-cart');\n        this.updateTotal();\n    }\n    \n    static addItem(itemName, price) {\n        const item = document.createElement('div');\n        item.className = 'cart-item';\n        item.textContent = itemName;\n        item.dataset.price = price;\n        this.cart.appendChild(item);\n        this.updateTotal();\n    }\n    \n    static getTotal() { return this.total; }\n}\n\nShoppingCart.init();\nShoppingCart.addItem('Widget', 29.99);",
			Category:    "Best Practices",
		},
		{
			Title:       "Module Communication",
			Description: "Modules can call each other's public methods. Use for complex apps with shared functionality.",
			JQueryCode:  "// Module A - Shopping Cart\nvar Cart = (function($) {\n    return {\n        addItem: function(name, price) {\n            $('.cart').append(`<div>${name} $${price}</div>`);\n        },\n        getTotal: function() {\n            return calculateCartTotal();\n        }\n    };\n})(jQuery);\n\n// Module B - Order Processing\nvar Orders = (function($) {\n    return {\n        checkout: function() {\n            const total = Cart.getTotal();\n            console.log('Processing order:', total);\n        }\n    };\n})(jQuery);\n\n// Usage: Modules interact\nCart.addItem('Book', 19.99);\nCart.addItem('Pen', 2.99);\nOrders.checkout();",
			ModernCode:  "// Modern: ES6 classes\nclass Cart {\n    static addItem(name, price) {\n        document.querySelector('.cart').innerHTML += `<div>${name} $${price}</div>`;\n    }\n    static getTotal() { return calculateCartTotal(); }\n}\n\nclass Orders {\n    static checkout() {\n        const total = Cart.getTotal();\n        console.log('Processing order:', total);\n    }\n}\n\n// Usage\nCart.addItem('Book', 19.99);\nOrders.checkout();",
			Category:    "Best Practices",
		},
		{
			Title:       "$.noConflict() - Multiple Libraries",
			Description: "Use when other libraries (Prototype, MooTools) also use $. Common in legacy codebases with mixed libraries.",
			JQueryCode:  "var $j = jQuery.noConflict();  // jQuery gives up $\n$j('#button').on('click', handler);  // use $j instead\n$('#prototype-element').hide();      // $ now belongs to Prototype\njQuery.noConflict();\n(function($) {\n$('#button').on('click', handler);\n})(jQuery);\njQuery('#button').on('click', handler);  // verbose but clear",
			ModernCode:  "// Modern: No conflicts with ES6 modules - each library is namespaced\nimport jQuery from 'jquery';\nimport * as Prototype from 'prototype';\n\njQuery('#button').on('click', handler);\nPrototype.$('element').hide();",
			Category:    "Best Practices",
		},
		{
			Title:       "Use Event Delegation for Dynamic Content",
			Description: "Bind to parent, not children. Works for future elements added dynamically.",
			JQueryCode:  "// WRONG: Won't work for dynamically added items\n$('.delete-btn').on('click', deleteItem);  // Only works for EXISTING buttons\n$('#list').append('<button class=\"delete-btn\">Delete</button>');  // This won't work!\n\n// CORRECT: Event delegation - bind to parent\n$('#list').on('click', '.delete-btn', deleteItem);  // Works for ALL buttons, even future ones!\n$('#list').append('<button class=\"delete-btn\">Delete</button>');  // ✓ This works!",
			ModernCode:  "document.addEventListener('click', (e) => {\n    if (e.target.matches('button')) handler(e);\n});\ncontainer.addEventListener('click', (e) => {\n    if (e.target.closest('button')) handler(e);\n});",
			Category:    "Best Practices",
		},
		{
			Title:       "Minimize DOM Manipulation",
			Description: "Build HTML in memory, then insert once. Touching DOM is expensive.",
			JQueryCode:  "// BAD: 100 DOM operations!\nfor (let i = 0; i < 100; i++) {\n    $('#list').append('<li>' + i + '</li>');  // Touches DOM 100 times!\n}\n\n// GOOD: Build in memory, insert once (1 DOM operation)\nconst items = [];\nfor (let i = 0; i < 100; i++) {\n    items.push('<li>' + i + '</li>');\n}\n$('#list').html(items.join(''));  // ✓ ONE DOM touch\n\n// EVEN BETTER: Use array methods\nconst html = Array.from({length: 100}, (_, i) => `<li>${i}</li>`).join('');\n$('#list').html(html);",
			ModernCode:  "// Modern JS: Same principle\nconst items = Array.from({length: 100}, (_, i) => `<li>${i}</li>`);\nlist.innerHTML = items.join('');\n\n// Or use DocumentFragment for elements:\nconst frag = document.createDocumentFragment();\nfor (let i = 0; i < 100; i++) {\n    const li = document.createElement('li');\n    li.textContent = i;\n    frag.appendChild(li);\n}\nlist.appendChild(frag);  // ONE DOM touch",
			Category:    "Best Practices",
		},
		{
			Title:       "this vs $(this)",
			Description: "In jQuery callbacks, 'this' is DOM element. $(this) is jQuery-wrapped element with methods.",
			JQueryCode:  "$('.btn').on('click', function() {\n    console.log(this);        // DOM element: <button class=\"btn\">...\n    console.log($(this));     // jQuery object: [<button class=\"btn\">...]\n    \n    // Use DOM properties/methods on this:\n    this.disabled = true;     // ✓ Native DOM property\n    this.id;                  // ✓ Native property\n    \n    // Use jQuery methods on $(this):\n    $(this).addClass('clicked');  // ✓ jQuery method\n    $(this).fadeOut();            // ✓ jQuery method\n});",
			ModernCode:  "buttons.forEach(btn => {\n    btn.addEventListener('click', function() {\n        this.disabled = true;\n        this.classList.add('clicked');\n    });\n});",
			Category:    "Best Practices",
		},
		{
			Title:       "GOTCHA: Arrow Functions and 'this'",
			Description: "Arrow functions DON'T have their own 'this'. Using $(this) in arrow functions will fail!",
			HTMLCode:    "<button class=\"btn\">Button 1</button>\n<button class=\"btn\">Button 2</button>",
			JQueryCode:  "// WRONG: Arrow function - 'this' is NOT the button!\n$('.btn').on('click', (e) => {\n    $(this).addClass('active');  // ERROR! 'this' is window/undefined\n});\n\n// CORRECT: Regular function\n$('.btn').on('click', function(e) {\n    $(this).addClass('active');  // ✓ 'this' is the clicked button\n});\n\n// CORRECT: Use e.currentTarget instead\n$('.btn').on('click', (e) => {\n    $(e.currentTarget).addClass('active');  // ✓ Works!\n});\n\n// Same issue with .each():\n$('.btn').each((i, el) => {\n    $(this).text('Wrong!');  // ✗ this is NOT el\n    $(el).text('Correct!');  // ✓ Use the parameter\n});",
			ModernCode:  "// Same issue in modern JS with arrow functions\nbuttons.forEach(btn => {\n    btn.addEventListener('click', (e) => {\n        console.log(this);  // NOT the button (window or undefined)\n    });\n});\n\n// CORRECT: Use regular function\nbuttons.forEach(btn => {\n    btn.addEventListener('click', function(e) {\n        console.log(this);  // ✓ The button\n    });\n});\n\n// CORRECT: Use e.currentTarget\nbuttons.forEach(btn => {\n    btn.addEventListener('click', (e) => {\n        console.log(e.currentTarget);  // ✓ The button\n    });\n});",
			Category:    "Best Practices",
		},
		{
			Title:       "GOTCHA: Checking if Element Exists",
			Description: "jQuery ALWAYS returns object, even if nothing found. Check .length, not truthiness!",
			HTMLCode:    "No element with id=\"missing\"",
			JQueryCode:  "// WRONG: jQuery object is ALWAYS truthy, even if empty!\nif ($('#missing')) {\n    // RUNS! (BAD) Even though element doesn't exist\n    console.log('Found it!');  // This executes! Wrong!\n}\n\n// CORRECT: Check .length property\nif ($('#missing').length) {\n    // DOESN'T run (correct) - length is 0 (falsy)\n}\n\nif ($('#missing').length > 0) {\n    // More explicit - same result\n}\n\n// Common pattern: Check before using\nconst $modal = $('#modal');\nif ($modal.length) {\n    $modal.fadeIn();  // Only runs if modal exists\n}",
			ModernCode:  "querySelector returns null if not found\nif (document.querySelector('#missing')) {\n    // Doesn't run - null is falsy\n}\nif (document.querySelector('#exists')) {\n    // RUNS - element object is truthy\n}",
			Category:    "Best Practices",
		},
		{
			Title:       "GOTCHA: Accidental Global Variables",
			Description: "Forgetting 'var'/'let'/'const' creates global variables. Use 'use strict' to catch this!",
			HTMLCode:    "<button id=\"btn\">Click me</button>",
			JQueryCode:  "// WRONG: Creates global variable\n$('#btn').on('click', function() {\n    counter = 0;  // NO var/let/const = GLOBAL!\n});\n\n// CORRECT: Use var/let/const\n$('#btn').on('click', function() {\n    let counter = 0;  // ✓ Local to this function\n});\n\n// USE STRICT: Prevents this error\n(function($) {\n    'use strict';\n    counter = 0;  // ERROR: counter is not defined\n})(jQuery);",
			ModernCode:  "// Same problem in modern JS\nbtn.addEventListener('click', function() {\n    counter = 0;  // NO const/let = GLOBAL!\n});\n\n// CORRECT: Use const/let\nbtn.addEventListener('click', function() {\n    let counter = 0;  // ✓ Local\n});\n\n// Modern: ES6 modules are automatically strict\n// No need for 'use strict' in modules\ncounter = 0;  // ERROR in ES6 modules",
			Category:    "Best Practices",
		},
	}
}

